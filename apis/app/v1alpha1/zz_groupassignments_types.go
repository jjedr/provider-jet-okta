/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupAssignmentsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupAssignmentsParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-okta/apis/app/v1alpha1.Oauth
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	AppIDRef *v1.Reference `json:"appIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AppIDSelector *v1.Selector `json:"appIdSelector,omitempty" tf:"-"`

	// A group to assign to this application
	// +kubebuilder:validation:Required
	Group []GroupParameters `json:"group" tf:"group,omitempty"`
}

type GroupObservation struct {
}

type GroupParameters struct {

	// A group to associate with the application
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-okta/apis/group/v1alpha1.Group
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`
}

// GroupAssignmentsSpec defines the desired state of GroupAssignments
type GroupAssignmentsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupAssignmentsParameters `json:"forProvider"`
}

// GroupAssignmentsStatus defines the observed state of GroupAssignments.
type GroupAssignmentsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupAssignmentsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupAssignments is the Schema for the GroupAssignmentss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oktajet}
type GroupAssignments struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupAssignmentsSpec   `json:"spec"`
	Status            GroupAssignmentsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupAssignmentsList contains a list of GroupAssignmentss
type GroupAssignmentsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupAssignments `json:"items"`
}

// Repository type metadata.
var (
	GroupAssignments_Kind             = "GroupAssignments"
	GroupAssignments_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupAssignments_Kind}.String()
	GroupAssignments_KindAPIVersion   = GroupAssignments_Kind + "." + CRDGroupVersion.String()
	GroupAssignments_GroupVersionKind = CRDGroupVersion.WithKind(GroupAssignments_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupAssignments{}, &GroupAssignmentsList{})
}
